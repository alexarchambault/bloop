name: CI
on:
  push:
    tags:
      - v*
    branches:
      - master
  pull_request:

jobs:
  scalafmt:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - uses: coursier/setup-action@v1.3.0
        with:
          apps: scalafmt
          jvm: "temurin:17"
      - name: Check formatting
        run: .github/fmt.sh --test

  bridges:
    name: Server bridges tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - uses: coursier/setup-action@v1.3.0
        with:
          jvm: "temurin:17"
      - name: Tests
        run: |
          .github/setup-test-projects.sh &&\
          ./mill -i "bridges.scalajs-1[_].publishLocal" &&\
          ./mill -i "bridges.scalajs-1[_].test"
        shell: bash

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    name: Server tests
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - uses: coursier/setup-action@v1.3.0
        with:
          jvm: "temurin:17"
      - name: Compile and test main projects
        # Only running the tests in 2.12 for now. Many test fixtures need
        # to be updated for 2.13.
        run: |
          .github/setup-test-projects.sh &&\
          ./mill -i 'backend[_].test.compile' &&\
          ./mill -i 'frontend[_].test.compile' &&\
          ./mill -i 'backend[2.12.17].test' &&\
          ./mill -i 'frontend[2.12.17].test'
        shell: bash

  jvm-tests:
    name: Client JVM tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - uses: coursier/cache-action@v6.4
      - uses: coursier/setup-action@v1.2.0
        with:
          jvm: "zulu:17"
      - run: |
          ./mill -i __.publishLocal &&\
          ./mill -i integration.test.jvm
        if: runner.os != 'Windows'
      - run: |
          @call ./mill.bat -i __.publishLocal
          @call ./mill.bat -i integration.test.jvm
        shell: cmd
        if: runner.os == 'Windows'

  native-tests:
    name: Client native tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - uses: coursier/cache-action@v6.4
      - uses: coursier/setup-action@v1.2.0
        with:
          jvm: "zulu:17"
      - run: |
          ./mill -i "cli.writeNativeImageScript" generate.sh "" &&\
          export USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM=false &&\
          ./generate.sh &&\
          ./mill -i "cli.copyToArtifacts" artifacts/
        if: runner.os != 'Windows'
      - run: |
          export USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM=false
          .github/scripts/generate-native-image-windows.sh
        shell: bash
        if: runner.os == 'Windows'
      - uses: actions/upload-artifact@v3
        with:
          name: launchers
          path: artifacts/
          if-no-files-found: error
          retention-days: 1
      - run: |
          ./mill -i __.publishLocal &&\
          ./mill -i "integration.test.native"
        if: github.event_name == 'push' && runner.os != 'Windows'
      - run: |
          ./mill.bat -i __.publishLocal
          ./mill.bat -i integration.test.native
        if: github.event_name == 'push' && runner.os == 'Windows'
        shell: bash

  upload-launchers:
    name: Upload CLI
    needs: [scalafmt, jvm-tests, native-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - uses: coursier/cache-action@v6.4
      - uses: coursier/setup-action@v1.2.0
        with:
          jvm: "zulu:17"
      - uses: actions/download-artifact@v3
        with:
          name: launchers
          path: artifacts/
      - run: ./mill -i ci.upload artifacts/
        env:
          UPLOAD_GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - uses: coursier/setup-action@v1.3.0
        with:
          jvm: "temurin:17"
      - name: GPG setup
        run: .github/scripts/gpg-setup.sh
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
      - name: Release
        run: ./mill -i io.kipp.mill.ci.release.ReleaseModule/publishAll
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
